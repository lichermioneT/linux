在 Linux 中，环境变量（Environment Variables） 是一组动态命名的值，用来影响运行中进程的行为。
可以把它们理解为操作系统为程序提供的一些“配置参数”。



僵尸进程
进程优先级
孤儿进程，操作系统领养
以上就是状态各种情况


进程优先级，先后执行的顺序
进程切换,
    程序不是一次执行完成的
    寄存器是进程共享的
    文本程序没有完成会一直保留在寄存里面的


为什么我们执行c/c++代码需要找到路径
加载到内存里面，操作系统必须先找到。

USER环境变量的最大意义就是让我们确认用户是谁
echo:显示环境变量
export：设置环境变量
unset:取消环境变量
bash也是一个进程，运行的程序就是一个子进
环境变量具有 全局属性，会被子进程继承下去 为什么要继承下去，为了不同的引场景
本地变量--只会在当前进程有效

ls 
获取环境变量的三种方法
1.getenv
2.char* env[]
3.extern char* * environ
// 推荐getenv，因为需要什么拿到什么


int putenv(char* string)

环境变量就是系统给我们的一堆全局变量


程序地址空间
    高地址
    

    低地址
为什么地址空间是这样的？
    
环境变量
预先设置好一批全局变量，方便我们使用bash的时候方便


echo输出环境变量
echo $PATH
echo $HOME
echo $LOGNAME
echo &USER

USER环境变量的意义，


export设置环境变量
bash是一个系统进程，我们写的程序也是一个进程，是bash子进程。实际通过fork函数创建的
环境变量具有全局属性，是会被子进程全部继承下去的，为什么要继承下去，为了不同的引用场景

场景---让bash帮我们找指令路径 ，身份认证

myval=123 本地变量---只是存在当前（bash）的子进程有效
set | grep 

unset myval // 取消环境变量


lic@lic:~/Desktop/gitee/linux/class14$ env | grep pwd
lic@lic:~/Desktop/gitee/linux/class14$ env | grep PWD
PWD=/home/lic/Desktop/gitee/linux/class14
lic@lic:~/Desktop/gitee/linux/class14$ cd ..
lic@lic:~/Desktop/gitee/linux$ env | grep PWD
PWD=/home/lic/Desktop/gitee/linux
OLDPWD=/home/lic/Desktop/gitee/linux/class14
lic@lic:~/Desktop/gitee/linux$ env | grep PWD
PWD=/home/lic/Desktop/gitee/linux
OLDPWD=/home/lic/Desktop/gitee/linux/class14
lic@lic:~/Desktop/gitee/linux$

环境变量已经记录下我们的路径
ls凭什么显示当前文件下的文件
ls继承了bash的环境变量



获取环境

getenv:推荐
char* env[]
extern char** envrion

putenv

怎么一登录上来就是HOME目录 
cd $HOME
cd ~



echo是一个指令吗
ehco是一个子进程吗
echo为什么可以打印本变量


// 程序地址空间
！！！！！！！！！！！！！！！！！！！！
c/c++地址空间---究竟是什么呢？

高地址
----------------------------------


------------------------------------
堆区
-------------------------------------













-----------------------------------
栈区
----------------------------------
未初始化全局区
-----------------------------------
已经初始全局区
----------------------------------
代码区域
----------------------------------
低地址


c/c++地址空间是内存吗？
不是内存。
那是什么呢？
见现象：

虚拟地址空间
1.感性认识
    a.进程他认为自己是独占系统资源的（事实上并不是的）--- 理念
    b.



进程地址空间----操作系统给进程画的饼。
操作系统如何进行呢？

如何画饼：记性要好，画饼的本质：在你的大脑里面构建蓝图---数据结构对象
struct 蓝图
{
    char* who;
    char* when;
    char* target;
    char* money;
}

资源和分配的都要管理


// 先描述，后组织
进程本身需要管理
虚拟地址空间要管理

地址空间的本质：是内核的一种数据结构！


























































































































